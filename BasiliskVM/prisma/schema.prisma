generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Source {
  id      String           @id @default(cuid())
  name    String
  classes CharacterClass[]
  items   Item[]
  races   CharacterRace[]
  spells  Spell[]
}

model ItemType {
  id    String @id @default(cuid())
  name  String
  items Item[]
}

model Attributes {
  id      String           @id @default(cuid())
  name    String
  items   Item[]
  classes CharacterClass[]
}

model CharacterClass {
  id         String @id @default(cuid())
  name       String
  coverImage String
  hitDice    Int

  source   Source @relation(fields: [sourceId], references: [id])
  sourceId String

  attributes   Attributes? @relation(fields: [attributesId], references: [id])
  attributesId String?

  spells Spell[]

  @@index([sourceId])
  @@index([attributesId])
}

model CharacterRace {
  id         String @id @default(cuid())
  name       String
  coverImage String
  source     Source @relation(fields: [sourceId], references: [id])
  sourceId   String

  @@index([sourceId])
}

model Item {
  id         String       @id @default(cuid())
  name       String
  source     Source       @relation(fields: [sourceId], references: [id])
  sourceId   String
  type       ItemType     @relation(fields: [itemTypeId], references: [id])
  itemTypeId String
  attributes Attributes[]

  @@index([sourceId])
  @@index([itemTypeId])
}

model SpellComponent {
  id      String @id @default(cuid())
  type    String
  name    String
  spell   Spell  @relation(fields: [spellId], references: [id])
  spellId String

  @@index([spellId])
}

model SpellEffectDamageScalingValue {
  id String @id @default(cuid())

  resourceValue Int
  diceCount     Int
  facets        Int
  minDamage     Int?

  spellEffectDamageScaling   SpellEffectDamageScaling? @relation(fields: [spellEffectDamageScalingId], references: [id])
  spellEffectDamageScalingId String?

  @@index([spellEffectDamageScalingId])
}

model SpellEffectDamageScaling {
  id String @id @default(cuid())

  // Per character / resource level
  type        String
  values      SpellEffectDamageScalingValue[]
  spellEffect SpellEffect?
}

model SpellEffect {
  id   String @id @default(cuid())
  name String

  spell   Spell  @relation(fields: [spellId], references: [id])
  spellId String

  // Eg. saving throw, attack, condition change
  type String

  // Effect duration. eg (2 days, 3 weeks, 1 turn)
  durationType         String
  durationUnit         String
  durationNumericValue Int

  // Define an attack and damage
  attackType String
  damageType String

  // Damage scaling
  damageScaling SpellEffectDamageScaling @relation(fields: [spellEffectDamageScalingId], references: [id])

  // Require a character to do a saving throw
  savingThrowType String

  // Set different conditions (eg. frightened, enchanted)
  conditionToSet String

  // Allow creating nested effects
  parentEffectId String?
  parentEffect   SpellEffect?  @relation("NestedEffects", fields: [parentEffectId], references: [id], map: "parentEffectId", onDelete: NoAction, onUpdate: NoAction)
  childEffects   SpellEffect[] @relation("NestedEffects")

  // Allows to execute child effects that match some rule
  executeRule                Json?
  spellEffectDamageScalingId String @unique

  @@index([spellId])
  @@index([parentEffectId])
  @@index([spellEffectDamageScalingId])
}

model Spell {
  id           String @id @default(cuid())
  name         String
  illustration String
  icon         String

  source   Source @relation(fields: [sourceId], references: [id])
  sourceId String

  description String
  level       Int

  school String

  isRitual              Boolean
  requiresConcentration Boolean

  distanceType         String
  distanceNumericValue Int

  castingTimeType         String
  castingTimeNumericValue Int

  components SpellComponent[]
  effects    SpellEffect[]
  classes    CharacterClass[]

  @@index([sourceId])
}
